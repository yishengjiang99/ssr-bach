/// <reference types="node" />
export declare const change_ext: (file: any, ext: any) => string;
export declare function tagResponse(res: any, templateFn: any): void;
export declare const midiMeta: (midiFile: string) => {
    length: number;
    toString(): string;
    toLocaleString(): string;
    pop(): import("@tonejs/midi/dist/Header").MetaEvent;
    push(...items: import("@tonejs/midi/dist/Header").MetaEvent[]): number;
    concat(...items: ConcatArray<import("@tonejs/midi/dist/Header").MetaEvent>[]): import("@tonejs/midi/dist/Header").MetaEvent[];
    concat(...items: (import("@tonejs/midi/dist/Header").MetaEvent | ConcatArray<import("@tonejs/midi/dist/Header").MetaEvent>)[]): import("@tonejs/midi/dist/Header").MetaEvent[];
    join(separator?: string): string;
    reverse(): import("@tonejs/midi/dist/Header").MetaEvent[];
    shift(): import("@tonejs/midi/dist/Header").MetaEvent;
    slice(start?: number, end?: number): import("@tonejs/midi/dist/Header").MetaEvent[];
    sort(compareFn?: (a: import("@tonejs/midi/dist/Header").MetaEvent, b: import("@tonejs/midi/dist/Header").MetaEvent) => number): import("@tonejs/midi/dist/Header").MetaEvent[];
    splice(start: number, deleteCount?: number): import("@tonejs/midi/dist/Header").MetaEvent[];
    splice(start: number, deleteCount: number, ...items: import("@tonejs/midi/dist/Header").MetaEvent[]): import("@tonejs/midi/dist/Header").MetaEvent[];
    unshift(...items: import("@tonejs/midi/dist/Header").MetaEvent[]): number;
    indexOf(searchElement: import("@tonejs/midi/dist/Header").MetaEvent, fromIndex?: number): number;
    lastIndexOf(searchElement: import("@tonejs/midi/dist/Header").MetaEvent, fromIndex?: number): number;
    every<S extends import("@tonejs/midi/dist/Header").MetaEvent>(predicate: (value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => U, thisArg?: any): U[];
    filter<S_1 extends import("@tonejs/midi/dist/Header").MetaEvent>(predicate: (value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => value is S_1, thisArg?: any): S_1[];
    filter(predicate: (value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => unknown, thisArg?: any): import("@tonejs/midi/dist/Header").MetaEvent[];
    reduce(callbackfn: (previousValue: import("@tonejs/midi/dist/Header").MetaEvent, currentValue: import("@tonejs/midi/dist/Header").MetaEvent, currentIndex: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => import("@tonejs/midi/dist/Header").MetaEvent): import("@tonejs/midi/dist/Header").MetaEvent;
    reduce(callbackfn: (previousValue: import("@tonejs/midi/dist/Header").MetaEvent, currentValue: import("@tonejs/midi/dist/Header").MetaEvent, currentIndex: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => import("@tonejs/midi/dist/Header").MetaEvent, initialValue: import("@tonejs/midi/dist/Header").MetaEvent): import("@tonejs/midi/dist/Header").MetaEvent;
    reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: import("@tonejs/midi/dist/Header").MetaEvent, currentIndex: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => U_1, initialValue: U_1): U_1;
    reduceRight(callbackfn: (previousValue: import("@tonejs/midi/dist/Header").MetaEvent, currentValue: import("@tonejs/midi/dist/Header").MetaEvent, currentIndex: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => import("@tonejs/midi/dist/Header").MetaEvent): import("@tonejs/midi/dist/Header").MetaEvent;
    reduceRight(callbackfn: (previousValue: import("@tonejs/midi/dist/Header").MetaEvent, currentValue: import("@tonejs/midi/dist/Header").MetaEvent, currentIndex: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => import("@tonejs/midi/dist/Header").MetaEvent, initialValue: import("@tonejs/midi/dist/Header").MetaEvent): import("@tonejs/midi/dist/Header").MetaEvent;
    reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: import("@tonejs/midi/dist/Header").MetaEvent, currentIndex: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => U_2, initialValue: U_2): U_2;
    find<S_2 extends import("@tonejs/midi/dist/Header").MetaEvent>(predicate: (this: void, value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, obj: import("@tonejs/midi/dist/Header").MetaEvent[]) => value is S_2, thisArg?: any): S_2;
    find(predicate: (value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, obj: import("@tonejs/midi/dist/Header").MetaEvent[]) => unknown, thisArg?: any): import("@tonejs/midi/dist/Header").MetaEvent;
    findIndex(predicate: (value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, obj: import("@tonejs/midi/dist/Header").MetaEvent[]) => unknown, thisArg?: any): number;
    fill(value: import("@tonejs/midi/dist/Header").MetaEvent, start?: number, end?: number): import("@tonejs/midi/dist/Header").MetaEvent[];
    copyWithin(target: number, start: number, end?: number): import("@tonejs/midi/dist/Header").MetaEvent[];
    [Symbol.iterator](): IterableIterator<import("@tonejs/midi/dist/Header").MetaEvent>;
    entries(): IterableIterator<[number, import("@tonejs/midi/dist/Header").MetaEvent]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<import("@tonejs/midi/dist/Header").MetaEvent>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
    includes(searchElement: import("@tonejs/midi/dist/Header").MetaEvent, fromIndex?: number): boolean;
    flatMap<U_3, This = undefined>(callback: (this: This, value: import("@tonejs/midi/dist/Header").MetaEvent, index: number, array: import("@tonejs/midi/dist/Header").MetaEvent[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
    flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
    instruments: {
        stdname: string;
        onserver: boolean;
        number: number;
        name: string;
        family: string;
    }[];
    name: string;
    seconds: number;
};
export declare const resjson: (res: any, obj: any) => void;
export declare const sleep: (ms: number) => Promise<unknown>;
export declare const std_settings = "-f 32le -ar 48000 -ac 1";
export declare const std_inst_names: string[];
export declare const std_drums: {
    0: number;
    8: number;
    16: number;
    24: number;
    25: number;
    32: number;
    40: number;
};
export declare function WAVheader(n: any): Buffer;
export declare const keys: string[];
export declare const keys88: string[];
