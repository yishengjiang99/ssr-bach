// prettier-ignore
export const wasmBinary = new Uint8Array([
    0,97,115,109,1,0,0,0,1,159,128,128,128,0,5,96,2,127,127,0,96,2,125,125,1,125,96,6,127,127,127,127,127,127,1,127,96,1,127,1,125,96,1,127,0,2,172,128,128,128,0,3,3,101,110,118,11,99,111,110,115,111,108,101,95,108,111,103,0,0,3,101,110,118,4,112,111,119,102,0,1,3,101,110,118,6,109,101,109,111,114,121,2,0,1,3,132,128,128,128,0,3,2,3,4,4,132,128,128,128,0,1,112,0,0,7,168,128,128,128,0,3,11,110,101,119,69,110,118,101,108,111,112,101,0,2,8,101,110,118,83,104,105,102,116,0,3,11,97,100,115,114,82,101,108,101,97,115,101,0,4,9,129,128,128,128,0,0,10,219,133,128,128,0,3,216,130,128,128,0,2,1,127,2,125,2,127,65,0,65,0,40,2,4,65,32,107,34,6,54,2,4,32,6,32,0,54,2,28,32,6,32,1,59,1,26,32,6,32,2,59,1,24,32,6,32,3,59,1,22,32,6,32,4,59,1,20,32,6,32,5,54,2,16,32,6,32,6,40,2,28,54,2,12,65,16,32,6,46,1,26,16,0,67,0,0,0,64,32,6,46,1,26,178,67,0,0,150,68,149,16,1,33,7,32,6,40,2,12,34,5,32,7,32,6,40,2,16,178,34,8,148,169,54,2,0,32,5,67,0,0,0,64,32,6,46,1,24,178,67,0,0,150,68,149,16,1,32,8,148,169,54,2,4,32,5,67,0,0,0,64,32,6,46,1,22,178,67,0,0,150,68,149,16,1,32,8,148,169,54,2,8,65,32,32,5,46,1,0,16,0,2,64,32,6,40,2,12,40,2,0,65,11,75,13,0,32,6,40,2,12,34,5,65,0,54,2,16,32,5,65,0,54,2,0,11,32,6,40,2,12,34,5,32,6,46,1,20,34,4,54,2,12,32,5,65,128,128,192,163,4,54,2,16,32,5,67,0,0,112,196,32,5,40,2,0,179,149,56,2,20,32,5,67,0,0,112,68,32,5,40,2,8,179,149,56,2,28,32,5,67,0,0,0,64,32,6,46,1,24,178,67,0,0,150,68,149,16,1,67,0,0,32,65,32,4,178,67,0,0,72,195,149,16,1,140,148,56,2,24,65,0,32,6,65,32,106,54,2,4,32,5,11,11,212,130,128,128,0,3,1,127,1,125,1,124,2,125,65,0,65,0,40,2,4,65,16,107,34,1,54,2,4,32,1,32,0,54,2,12,65,48,32,0,46,1,0,16,0,2,64,2,64,32,1,40,2,12,40,2,0,69,13,0,32,1,40,2,12,34,0,32,0,40,2,0,65,127,106,54,2,0,32,0,32,0,42,2,16,32,0,42,2,20,146,56,2,16,12,1,11,2,64,32,1,40,2,12,40,2,4,69,13,0,32,1,40,2,12,34,0,32,0,40,2,4,65,127,106,54,2,4,32,1,67,0,0,128,63,32,0,42,2,16,147,67,0,0,112,68,148,34,2,56,2,8,32,1,32,2,32,1,40,2,12,42,2,24,148,34,2,56,2,8,32,1,40,2,12,32,2,67,0,0,112,68,148,32,2,147,56,2,16,12,1,11,32,1,40,2,12,40,2,8,69,13,0,32,1,40,2,12,34,0,32,0,40,2,8,65,127,106,54,2,8,32,0,32,0,42,2,16,32,0,42,2,28,146,56,2,16,11,2,64,32,1,40,2,12,42,2,16,34,2,67,0,0,112,68,95,32,2,32,2,92,114,13,0,32,1,40,2,12,65,128,128,192,163,4,54,2,16,11,2,64,32,1,40,2,12,42,2,16,187,34,3,68,0,0,0,0,0,0,0,0,102,32,3,32,3,98,114,13,0,32,1,40,2,12,65,0,54,2,16,11,32,1,40,2,12,42,2,16,33,2,65,0,32,1,65,16,106,54,2,4,32,2,11,11,159,128,128,128,0,1,1,127,2,64,65,0,40,2,4,33,1,32,0,66,0,55,2,0,32,1,65,16,107,32,0,54,2,12,11,11,11,176,128,128,128,0,4,0,65,4,11,4,80,39,0,0,0,65,16,11,8,115,116,32,99,101,110,116,0,0,65,32,11,7,97,115,116,101,112,115,0,0,65,48,11,8,115,104,105,102,116,101,100,0
  ]);
const pro = new WebAssembly.Module(wasmBinary);
const mem = new WebAssembly.Memory({
	initial: 1, //100 x 64k ..just putting in some safe values now
	maximum: 1,
});
const instance = new WebAssembly.Instance(pro, {
	env: {
		memory: mem,
		console_log: (str, v) => console.log(str, v),
		table: new WebAssembly.Table({ element: "anyfunc", initial: 6 }),
		powf: (b, exp) => Math.pow(b, exp),
	},
});
let sbrk = 0;
const mempool = [];
while (sbrk < 0xffff - 24) {
	mempool.push(sbrk);
	sbrk += 24;
}
export function envelope(att, decay, release, sustain, sr) {
	if (mempool.length == 0) {
		alert("banned. please gc some envelope refs");
		return;
	}
	const pt = mempool.shift();
	instance.exports.newEnvelope(pt, att, decay, release, sustain, sr);

	return {
		shift: () => instance.exports.envShift(pt),
		release: () => instance.exports.adsrReleaes(pt),
		free: () => mempool.push(pt),
		info: () => {
			const [
				att_steps,
				decay_steps,
				release_steps,
				sustain,
				db_attenuate,
				att_rate,
				decay_rate,
				release_rate,
			] = [...new Uint32Array(mem.buffer, pt, 4), ...new Float32Array(mem.buffer, pt + 16, 4)];
			return {
				att_steps,
				decay_steps,
				release_steps,
				sustain,
				db_attenuate,
				att_rate,
				decay_rate,
				release_rate,
			};
		},
	};
}
